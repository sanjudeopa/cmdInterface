#!/usr/bin/env python3
'''
Display regression data checker (and possibly others) stats in table format.
'''

import os
import sys
import argparse
import json

from lib_shared.statistics.metrics import MetricsPopulator, ChecksMetric, ECCMetric, MemLayoutMetric, CategoriesMetric, AgentsGeneratorMetric
from lib_shared.statistics.reporter import report_stats
from lib_shared.const_log import getStdoutLogger

LOGGER = getStdoutLogger()

# TODO(vinalm01, ALP, add target metrics)
# Add, via a cfg file, a set of target metrics expected for a given regression
# And then flag wherever those targets were not met
def parse_args():
    '''
    Parse arguments
    '''
    parser = argparse.ArgumentParser(
            prog='show_stats',
            description=('Output test bench regression stats in table format.'))
    parser.add_argument(
            "--stats-path",
            # REVISIT(vinalm01, ALP, how to get the stats dir from global cfg here?)
            default=os.path.join(os.getenv('POPEYE_HOME'), 'stats_collection'),
            help="Path to the stats files generated by the regression.")
    parser.add_argument(
            '--data-checker',
            action="store_true",
            help='Show aggregated data checker stats.')
    parser.add_argument(
            '--ecc-checker',
            action="store_true",
            help='Show aggregated ecc checker stats.')
    parser.add_argument(
            '--mem-layout',
            action="store_true",
            help='Show aggregated memory layout stats.')
    parser.add_argument(
            '--popeye-generator',
            action="store_true",
            help='Show aggregated cpu generator stats.')
    parser.add_argument(
            '--agent-generator',
            action="store_true",
            help='Show aggregated cpu generator stats.')
    parser.add_argument(
            '--stats-target',
            default=None,
            type=str,
            help=('json string containing targets for specific keys in the metrics.'
                  ' Some keys are treated specially'
                  ' "total" is checked against the sum of all metrics'
                  ' "*" applies to all keys'
                  """ ex: --stats-target='{"key": value}', value can be string or integer"""))
    parser.add_argument("--profile", action="store_true",
                        help="Enable profiling of the data_checker")

    return parser.parse_args()

def main():
    '''
    Output test bench regression stats in table format.
    '''
    if not os.path.isdir(args.stats_path) and not os.path.isfile(args.stats_path):
        LOGGER.error("Stats Collection folder or file %s does not exist", args.stats_path)
        return 1

    metrics_populator = MetricsPopulator(args.stats_path)

    if args.data_checker:
        metrics_populator.add(ChecksMetric())

    if args.ecc_checker:
        metrics_populator.add(ECCMetric())

    if args.popeye_generator:
        metrics_populator.add(CategoriesMetric())

    if args.agent_generator:
        metrics_populator.add(AgentsGeneratorMetric())

    if args.mem_layout:
        metrics_populator.add(MemLayoutMetric())

    metrics_populator.populate()

    stats_target_d = json.loads(args.stats_target) if args.stats_target else None

    if args.data_checker:
        LOGGER.info("Data Checker statistics.")
        report_stats(metrics_populator, 'checks', stats_target_d)

    if args.ecc_checker:
        LOGGER.info("ECC Checker statistics.")
        report_stats(metrics_populator, 'ecc_stats', stats_target_d)

    if args.popeye_generator:
        LOGGER.info("Stimulus Generator statistics.")
        report_stats(metrics_populator, 'agents', stats_target_d)

    if args.agent_generator:
        LOGGER.info("Stimulus Generator statistics.")
        report_stats(metrics_populator, 'agents', stats_target_d)

    if args.mem_layout:
        LOGGER.info("Layout Generator statistics.")
        report_stats(metrics_populator, 'mem_layout', stats_target_d)

    return 0

if __name__ == '__main__':
    args = parse_args()
    if args.profile:
        profile_filename = "show_stats_profile.out"
        import cProfile
        cProfile.run("sys.exit(main())", profile_filename)
        import pstats
        p = pstats.Stats(profile_filename)
        p.sort_stats('tottime').print_stats()
    else:
        sys.exit(main())
