#!/usr/bin/env python3
'''
This module provides function update_wh_component_module(), which generates a
static module to load an ARM warehouse component fast and at a fixed revision.
'''

import sys
import argparse
import subprocess
import re
import datetime
import textwrap

def update_wh_component_module(component, modulefile):
    '''
    Autogenerate a static module for an ARM warehouse component.

    component -- string
        The component name to load. See /arm/devsys-tools/abs/setup_wh_comp -h
        for information on the formatting.

    modulefile -- string
        Path to the file where the autogenerated modulefile is dumped.
    '''
    # Extract the fixed version number.
    version_number = re.sub(r'.*:([\d.]+):/([v\d]+)', r'\1\2', component)

    cmd = ['/arm/devsys-tools/abs/setup_wh_comp', '--shell', 'csh', '--patch']
    cmd.append(component)

    out = subprocess.check_output(cmd, universal_newlines=True).strip().split('\n')

    # Extract the environment variable's name (first group) and value (second
    # group) from cmd's output.
    pattern = re.compile(r'''^(?:.*&&[^|]*)?setenv\s+(\S+)\s+'\s*([^']+)\s*'.*$''')

    command_set = ''
    for line in out:
        # Substitute the arch version with $Os_Tag.
        line = re.sub(r"linux-[a-z0-9_]+", "$Os_Tag", line)

        variable, values = re.match(pattern, line).groups()
        if 'test' in line:
            command_set += '\n'
            # Reverse the list in order to preserve the search order
            # (prepending values to variable from last to first).
            for value in values.split(':')[::-1]:
                command_set += 'prepend-path {0} {1}\n'.format(variable, value)
        else:
            command_set += 'setenv %s "%s"\n' % (variable, values)
            # Keep track of the current floating revision number associated
            # with the fixed version number.

    with open(modulefile, 'w') as fh:
        fh.write(textwrap.dedent('''\
                #%Module
                # vi:ft=tcl:

                # THIS FILE WAS AUTOGENERATED ON {0}.
                # EDITS WILL BE LOST. DO NOT EDIT BY HAND.
                # PLEASE REPORT PROBLEMS TO POPEYE TEAM.
                #
                # To update the file please run:
                # $ ./bin/update_wh_component_module '{1}:<version>' --output '{2}'
                # $ git commit --only '{2}' --message='env: update {2} to version <version>'

                module-whatis "Autogenerated static module for {3}."

                package require arm
                package require arm::modules::tool

                set Vendor_Tag  popeye
                set Tool_Tag    {3}_static
                set Version_Tag {4} ;# IMPORTANT Upon update, one should tag this revision on Warehouse Component Manager

                set Os_Tag [arm::platform os-generic]-[arm::platform arch-tag]

                initSet
                {5}
                exitSet
                ''').format(datetime.date.today(),
                            ':'.join(component.split(':')[0:2]),
                            modulefile,
                            component.split(':')[1].lower(),
                            version_number,
                            command_set.strip()))
    return 0


def main(argv):
    '''
    Parse command-line arguments.

    argv -- list of strings
        Command line arguments to parse.
    '''
    parser = argparse.ArgumentParser(
            prog='update_wh_component_module',
            description=('Update or create the static modulefile of an ARM'
                         ' warehouse component.'))
    parser.add_argument(
            'component',
            nargs='?',
            default='PDAuto:blk_val_libs:1.3:/v18',
            help='Warehouse component to update (default: %(default)s).')
    parser.add_argument(
            '--output', '-o',
            metavar='FILE',
            default='modules/dep_blk_val.module',
            help='Output file to generate (default: %(default)s).')

    args = parser.parse_args(argv[1:])

    print("\n WARNING:\n Did you tag {} in Warehouse Component Manager?\n".format(args.component))
    return update_wh_component_module(args.component, args.output)


if __name__ == '__main__':
    sys.exit(main(sys.argv))
